#!/usr/bin/python
# -*- coding:Utf-8 -*-

import urwid
import louie
import holygrail

from datetime import datetime, timedelta, date

def cant_be_call_on_empty_mainview(func):
    def _cant_be_call_on_empty_mainview(*args):
        if len(args[0].content) > 1:
            func(*args)
    return _cant_be_call_on_empty_mainview

def update_current_item(func):
    def _update_current_item(*args):
        self = args[0]
        item = func(*args)
        self.content[self.position].original_widget.update()

    return _update_current_item

def remove_current_item(func):
    def _remove_current_item(*args):
        self = args[0]
        save_position = self.position
        item = func(*args)
        self.content.pop(save_position)

        # only one existing todo
        if len(self.content) == 1:
            # call usual update, the difference won't value to code some
            #c specifique optimisations
            louie.send("update_main")

        # at the end of the list
        elif len(self.content) <= self.position:
            # clean useless stuff
            self.content.pop(self.position - 1)
            self.content.pop(self.position - 2)
            # go down if not at bottom, else go to one
            self.position = self.position - 3 if (self.position - 3) > 0 else 1
            # nothing in the list ? go to 0
            if len(self.content) == 1:
                self.position = 0
            self.content.set_focus(self.position)

        # have remove everything from a realm
        elif isinstance(self.content[self.position].original_widget, urwid.Divider):
            # clean useless stuff
            self.content.pop(self.position)
            self.content.pop(self.position - 1)
            # go down if not at bottom, else go to one
            self.position = self.position - 3 if (self.position - 3) > 0 else 1
            # nothing in the list ? go to 0
            if len(self.content) == 1:
                self.position = 1
            self.content.set_focus(self.position)

    return _remove_current_item

def update_realm(func):
    def _update_realm(*args):
        func(*args)
        louie.send("update_realm")
    return _update_realm

def update_main(func):
    def _update_main(*args):
        func(*args)
        louie.send("update_main")
    return _update_main

def disconnect(func):
    def _disconnect(*args):
        map(lambda i: louie.disconnect(i(), "user_input_done"), louie.get_all_receivers(signal="user_input_done"))
        func(*args)
    return _disconnect

def have_input(func):
    def _have_input(*args):
        # ugly, to get "self"
        if args[0].user_input.strip():
            func(*args)
    return _have_input

class MissionWidget(urwid.Text):
    def __init__(self, mission):
        if not isinstance(mission, holygrail._Mission):
            raise ValueError("Mission widget need a holygrail._Mission object")
        self.mission = mission
        urwid.Text.__init__(self, self.display(), wrap="clip")

    def update(self):
        self.set_text(self.display())

    def display(self):
        def format_timedelta(td):
            if -td.days > 1:
                return "%s days" % ((-td.days) - 1)
            else:
                minutes = td.seconds / 60
                if minutes > 60:
                    return "%s hours" % (minutes  / (60))
                else:
                    return "%s minutes" % (minutes)

        display = ["   "]
        old = date.today() - self.mission.created_at
        if (old.days - 1)/7 > 0:
            display.append(("old", "|"*((old.days - 1)/7)))
            display.append(" ")
        display.append("%s" % self.mission.description)
        if self.mission.quest:
            display.append(" ")
            display.append(("quest", "[%s]" % self.mission.quest.description))
        if self.mission.due:
            display.append(" - ")
            if self.mission.due > datetime.now():
                color = "date left"
                display.append((color, "%s" % format_timedelta(datetime.now() - self.mission.due)))
            else:
                color = "date late"
                display.append((color, "%s" % format_timedelta(self.mission.due - datetime.now() )))

        return display

    def activate(self):
        self.mission.toggle()

    def due_today(self, days):
        if days == 1:
            self.mission.due_for(datetime.today())
        else:
            self.mission.due_for(datetime.today() + timedelta(days))

    def get_realm(self):
        return self.mission.realm

    def get_quest(self):
        return self.mission.quest

class SeparationWidget(urwid.Text):
    def __init__(self, text):
        urwid.Text.__init__(self, ('realm', text.upper()), wrap="clip")

    def activate(self):
        pass

class RealmWidget(SeparationWidget):
    def __init__(self, realm, detailled=False):
        if not isinstance(realm, holygrail._Realm):
            raise ValueError("Realm widget need a holygrail._Realm object")
        self.realm = realm
        self.detailled = detailled
        urwid.Text.__init__(self, self.display(), wrap="clip")

    def display(self):
        text = [('realm', self.realm.description.upper())]
        if self.detailled:
            if self.realm.default_realm:
                text.append(("quest", " [default]"))
            text.append(" (%i)" % len(self.realm.get_missions()))
        if self.realm.hide:
            text.append(" - ")
            text.append(("date left", "HIDE"))
        return text

    def update(self):
        self.set_text(self.display())

    def activate(self):
        self.realm.toggle_hide()

class State(object):
    def __init__(self, states_set, state):
        self.avalaible_states = states_set
        self.state = None
        self.set_state(state)
        louie.connect(self.set_state, "set state")
        louie.connect(self.get,       "get state")

    def set_state(self, state):
        if state not in self.avalaible_states:
            raise ValueError("Unknow state: %s, should be one of those %s" % (state, self.avalaible_states))
        self.state = state

    def get(self):
        return self.state

class MainViewList(object):
    def __init__(self, frame):
        self.position = 0
        self.frame = frame

    def init_signals(self):
        louie.connect(self.update_main_view,               "update_main")

        louie.connect(self.go_up,                          "k_main")
        louie.connect(self.go_down,                        "j_main")
        louie.connect(self.exit,                           "q_main")
        louie.connect(self.command_line,                   ":_main")
        louie.connect(self.tickle_one_day,                 "+_main")
        louie.connect(self.tickle_3_hours,                 "=_main")
        louie.connect(self.due_today,                      "t_main")
        louie.connect(self.due_in_3_days,                  "T_main")
        louie.connect(self.due_this_week,                  "w_main")
        louie.connect(self.no_due,                         "W_main")
        louie.connect(self.toggle_n_recreate,              "R_main")
        louie.connect(self.toggle_mission,                 " _main")
        louie.connect(self.remove_mission,                 "d_main")
        self.update_realm_view = lambda : louie.send("update_realm")
        louie.connect(self.update_realm_view,              "2_main")
        louie.connect(self.add_mission_to_current_realm,   "a_main")
        louie.connect(self.add_mission_to_default_realm,   "n_main")
        louie.connect(self.add_completed_mission,          "c_main")
        louie.connect(self.add_quest_to_current_mission,   "p_main")
        louie.connect(self.swap_mission_to_quest,          "s_main")
        louie.connect(self.rename_mission,                 "r_main")

        louie.connect(self.get_user_input_main_view,       "enter_user_input_main")

    def update_main_view(self):
        self.content = self.fill_main_view()
        self.listbox = urwid.ListBox(self.content)
        self.frame.set_body(self.listbox)
        self.content.set_focus(self.position)
        if isinstance(self.frame.get_body().get_focus()[0], urwid.Text):
            pass
        elif isinstance(self.frame.get_body().get_focus()[0].original_widget, urwid.Divider):
            self.position -= 1
        elif isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.position += 1
        self.content.set_focus(self.position)
        louie.send("set state", None, "main")

    def fill_main_view(self):
        super_main_view = holygrail.Grail().super_main_view()
        last_completed_missions = holygrail.Grail().last_completed_missions()
        if not super_main_view and not last_completed_missions:
            return urwid.SimpleListWalker([urwid.Text("You don't have any mission, press 'n' to create a new one")])
        main_view = []
        for i in super_main_view:
            if isinstance(i[0], str):
                main_view.append(SeparationWidget(i[0]))
            else:
                main_view.append(RealmWidget(i[0]))
            for j in i[1]:
                main_view.append(MissionWidget(j))

            main_view.append(urwid.Divider(" "))

        if last_completed_missions:
            a = 0
            main_view.append(SeparationWidget("LAST COMPLETED MISSIONS"))
            for i in holygrail.Grail().last_completed_missions():
                if a > 5:
                    break
                a += 1
                main_view.append(MissionWidget(i))
        else:
            main_view.pop()

        to_return = urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in main_view])

        to_return.set_focus(1)
        return to_return

    def get_main_view(self):
        self.update_main_view()
        return self.content

    @cant_be_call_on_empty_mainview
    def go_down(self):
        self.frame.get_body().set_focus(self.position + 1)
        louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, urwid.Divider):
            self.frame.get_body().set_focus(self.position + 3)
            louie.send("show key", None, "Gotcha !")

    @cant_be_call_on_empty_mainview
    def go_up(self):
        if self.position > 1:
            self.frame.get_body().set_focus(self.position - 1)
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)
            if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
                self.frame.get_body().set_focus(self.position - 3)
                louie.send("show key", None, "Gotcha !")

    def command_line(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().insert_text(":")
        louie.send("set state", None, "command")

    @cant_be_call_on_empty_mainview
    @remove_current_item
    def tickle_one_day(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.tickle(datetime.now() + timedelta(days=1))

    @cant_be_call_on_empty_mainview
    @remove_current_item
    def tickle_3_hours(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.tickle(datetime.now() + timedelta(hours=3))

    @cant_be_call_on_empty_mainview
    @update_main
    def due_today(self, days=1):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.due_today(days)

    def due_in_3_days(self):
        self.due_today(4)

    def due_this_week(self):
        self.due_today(8)

    @cant_be_call_on_empty_mainview
    @update_main
    def no_due(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.due_for(None)

    @cant_be_call_on_empty_mainview
    @update_main
    def toggle_n_recreate(self):
        mission = self.frame.get_body().get_focus()[0].original_widget
        mission.activate()
        holygrail.Grail().add_mission(mission.mission.description, quest=mission.get_quest(), realm=mission.get_realm())

    @cant_be_call_on_empty_mainview
    @remove_current_item
    def remove_mission(self):
        self.frame.get_body().get_focus()[0].original_widget.mission.remove()
        self.frame.get_body().set_focus(self.position - 1)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.frame.get_body().set_focus(self.position)
        else:
            self.position -= 1

    @cant_be_call_on_empty_mainview
    @update_main
    def toggle_mission(self):
        mission = self.frame.get_body().get_focus()[0].original_widget.mission

        if not mission.completed and mission.quest:
            self.add_new_mission_to_quest()
        else:
            mission.toggle()

    def add_new_mission_to_quest(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Next mission description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_next_mission_to_quest, "user_input_done")

    @disconnect
    def get_next_mission_to_quest(self):
        # I got what I want, disconnect
        old_mission = self.frame.get_body().get_focus()[0].original_widget.mission
        if self.user_input.strip():
            new_mission = holygrail.Grail().add_mission(self.user_input, realm=old_mission.realm.id, quest=old_mission.quest.id)
        old_mission.toggle()

    @cant_be_call_on_empty_mainview
    def add_mission_to_current_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_current_realm_mission, "user_input_done")

    @disconnect
    @have_input
    @update_main
    def get_current_realm_mission(self):
        self.position += 1
        new_mission_realm = self.frame.get_body().get_focus()[0].original_widget.get_realm()

        current_todo_due_date = self.frame.get_body().get_focus()[0].original_widget.mission.due
        due_date = None
        if current_todo_due_date:
            for i in (1, 4, 8):
                if current_todo_due_date < datetime.now() + timedelta(i):
                    due_date = datetime.now() + timedelta(i)
                    new_mission_realm = None
                    break

        holygrail.Grail().add_mission(self.user_input, realm=new_mission_realm, due=due_date)

    def get_user_input_main_view(self):
        self.frame.set_focus('body')
        # debug
        louie.send("show key", None, "Mission description: " + self.frame.footer.get_focus().edit_text)
        self.user_input = self.frame.footer.get_focus().edit_text
        self.frame.footer.get_focus().edit_text = ""
        self.frame.footer.get_focus().set_caption("")
        louie.send("set state", None, "main")
        louie.send("user_input_done")

    def add_mission_to_default_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_default_realm_mission, "user_input_done")

    @disconnect
    @have_input
    @update_main
    def get_default_realm_mission(self):
        self.position += 1
        holygrail.Grail().add_mission(self.user_input)

    def add_completed_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input_main")
        # this is the receiver
        louie.connect(self.get_completed_mission, "user_input_done")

    @disconnect
    @have_input
    def get_completed_mission(self):
        new_mission = holygrail.Grail().add_mission(self.user_input)
        new_mission.toggle()

    @cant_be_call_on_empty_mainview
    def add_quest_to_current_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Quest description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_quest_to_current_mission, "user_input_done")

    @disconnect
    @have_input
    @update_current_item
    def get_quest_to_current_mission(self):
        is_quest = holygrail.Grail().get_quest_by_desc(self.user_input.strip())
        if not is_quest:
            new_quest = holygrail.Grail().add_quest(self.user_input)
            self.frame.get_body().get_focus()[0].original_widget.mission.change_quest(new_quest.id)
        else:
            self.frame.get_body().get_focus()[0].original_widget.mission.change_quest(is_quest[0].id)

    @cant_be_call_on_empty_mainview
    def swap_mission_to_quest(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_swap_mission_to_quest, "user_input_done")

    @disconnect
    @have_input
    @update_current_item
    def get_swap_mission_to_quest(self):
        old_mission = self.frame.get_body().get_focus()[0].original_widget.mission
        is_quest = holygrail.Grail().get_quest_by_desc(old_mission.description)
        if not is_quest:
            new_quest = holygrail.Grail().add_quest(old_mission.description)
            old_mission.change_quest(new_quest.id)
        else:
            old_mission.change_quest(is_quest[0].id)
        old_mission.rename(self.user_input)

    @cant_be_call_on_empty_mainview
    def rename_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("New mission description: ")
        louie.send("set state", None, "user_input_main")
        louie.connect(self.get_rename_mission, "user_input_done")

    @disconnect
    @have_input
    @update_current_item
    def get_rename_mission(self):
        self.frame.get_body().get_focus()[0].original_widget.mission.rename(self.user_input.strip())

    def exit(self):
        raise urwid.ExitMainLoop()

class ChooseRealmList(object):
    def __init__(self, frame, main_view):
        self.position = 0
        self.frame = frame
        self.user_input = ""
        self.main_view = main_view

    def init_signals(self):
        louie.connect(self.chose_realm,                    "C_main")
        louie.connect(self.go_up,                          "k_chose_realm")
        louie.connect(self.go_down,                        "j_chose_realm")
        louie.connect(self.return_to_main_view,            "q_chose_realm")
        louie.connect(self.select_realm,                   "enter_chose_realm")

    def chose_realm(self):
        realm_list = [RealmWidget(c) for c in holygrail.Grail().list_realms(all_realms=True)]
        self.content = realm_list
        realm_list = urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in realm_list])
        listbox = urwid.ListBox(realm_list)
        listbox.set_focus(self.position)
        self.frame.set_body(listbox)
        louie.send("set state", None, "chose_realm")

    def return_to_main_view(self):
        louie.send("update_main")

    def go_down(self):
        # really unoptimised if
        if self.position < (len(self.content) - 1):
            self.frame.get_body().set_focus(self.position + 1)
            self.position += 1
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

    def go_up(self):
        if self.position > 0:
            self.frame.get_body().set_focus(self.position - 1)
            self.position -= 1
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

    @update_main
    def select_realm(self):
        if isinstance(self.main_view.listbox.get_focus()[0].original_widget, MissionWidget):
            self.main_view.listbox.get_focus()[0].original_widget.mission.change_realm(self.frame.get_body().get_focus()[0].original_widget.realm.id)

class RealmList(object):
    def __init__(self, frame):
        self.position = 0
        self.frame = frame
        self.user_input = ""

    def init_signals(self):
        louie.connect(self.update_realm_view,              "update_realm")

        louie.connect(self.update_main_view,               "1_realm")
        louie.connect(self.go_up,                          "k_realm")
        louie.connect(self.go_down,                        "j_realm")
        louie.connect(self.move_up_realm,                  "K_realm")
        louie.connect(self.move_down_realm,                "J_realm")
        louie.connect(self.toggle_realm_hide,              " _realm")
        louie.connect(self.exit,                           "q_realm")
        louie.connect(self.rename_realm,                   "r_realm")
        louie.connect(self.add_new_realm,                  "a_realm")
        louie.connect(self.add_new_realm,                  "n_realm")
        louie.connect(self.remove_realm,                   "d_realm")

        louie.connect(self.get_user_input_realm,           "enter_user_input_realm")

    def update_realm_view(self):
        self.content = self.fill_realm_view()
        self.listbox = urwid.ListBox(self.content)
        self.frame.set_body(self.listbox)
        self.content.set_focus(self.position)
        louie.send("set state", None, "realm")

    def fill_realm_view(self):
        context_view = [RealmWidget(i, detailled=True) for i in holygrail.Grail().list_realms(all_realms=True)]
        if context_view:
            return urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in context_view])
        else:
            return urwid.SimpleListWalker([urwid.Text("Error, you don't have any realm, something really wrong has happended")])

    def go_down(self):
        # really unoptimised if
        if self.position < (len(self.content) - 1):
            self.position += 1
            self.frame.get_body().set_focus(self.position)
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

    def go_up(self):
        if self.position > 0:
            self.position -= 1
            self.frame.get_body().set_focus(self.position)
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

    @update_realm
    def move_down_realm(self):
        if self.position < (len(self.content) - 1):
            realm = self.frame.get_body().get_focus()[0].original_widget.realm
            realm.change_position(realm.position + 1)
            self.position += 1

    @update_realm
    def move_up_realm(self):
        if self.position > 0:
            realm = self.frame.get_body().get_focus()[0].original_widget.realm
            realm.change_position(realm.position - 1)
            self.position -= 1

    @update_current_item
    def toggle_realm_hide(self):
        self.frame.get_body().get_focus()[0].original_widget.activate()

    def exit(self):
        raise urwid.ExitMainLoop()

    def rename_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("New realm description: ")
        louie.send("set state", None, "user_input_realm")
        louie.connect(self.get_rename_realm, "user_input_done")

    @disconnect
    @have_input
    @update_current_item
    def get_rename_realm(self):
        self.frame.get_body().get_focus()[0].original_widget.realm.rename(self.user_input.strip())

    def get_user_input_realm(self):
        self.frame.set_focus('body')
        # debug
        louie.send("show key", None, "Realm description: " + self.frame.get_footer().get_focus().edit_text)
        self.user_input = self.frame.get_footer().get_focus().edit_text
        self.frame.get_footer().get_focus().edit_text = ""
        self.frame.get_footer().get_focus().set_caption("")
        louie.send("set state", None, "realm")
        louie.send("user_input_done")

    def add_new_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Realm description: ")
        louie.send("set state", None, "user_input_realm")
        louie.connect(self.get_new_realm, "user_input_done")

    @disconnect
    @have_input
    @update_realm
    def get_new_realm(self):
        self.position += 1
        holygrail.Grail().add_realm(self.user_input)

    @update_realm
    def remove_realm(self):
        realm = self.frame.get_body().get_focus()[0].original_widget.realm
        if realm.default_realm:
            # TODO display error
            return
        all_missions = realm.get_missions(all_missions=True)

        # I can't delete a realm with mission, so move all the missions to the default realm
        if all_missions:
            for i in all_missions:
                i.change_realm(holygrail.Grail().get_default_realm().id)
        realm.remove()

        self.frame.get_body().set_focus(self.position - 1)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.frame.get_body().set_focus(self.position)
        else:
            self.position -= 1

class Window(object):

    def __init__(self):
        self.state = State(set(("main", "command", "realm", "user_input",
                                "chose_realm", "user_input_main",
                                "user_input_realm")), "main")

        self.frame = urwid.Frame(urwid.Text(""))

        self.main_view = MainViewList(self.frame)
        self.main_view.get_main_view()
        self.realm_view = RealmList(self.frame)
        self.choose_realm = ChooseRealmList(self.frame, self.main_view)

        self.show_key = urwid.Text("HolyGrail 0.1", wrap='clip')
        self.footer = urwid.Pile([urwid.AttrMap(urwid.Text(('header', "I am before command line")), "header"), urwid.Edit("", "")])
        self.frame.set_header(urwid.AttrMap(self.show_key, 'header'))
        self.frame.set_footer(self.footer)

        palette = [('header', 'white', 'dark red'),
                   ('reveal focus', 'white', 'dark red', 'standout'),
                   ('realm', 'dark red', '', 'bold'),
                   ('quest', 'light green', '', 'bold'),
                   ('old', 'yellow', '', 'bold'),
                   ('date left', 'black', 'light cyan'),
                   ('date late', 'yellow', 'dark magenta'),
                   ('mission', 'light gray', '')]

        self.loop = urwid.MainLoop(self.frame, palette,
                                   input_filter=self.show_all_input,
                                   unhandled_input=self.manage_input)
        self.init_signals()

    def get_state(self):
        return louie.send("get state")[0][1]

    def exit(self):
        raise urwid.ExitMainLoop()

    def run(self):
        self.loop.run()

    def init_signals(self):
        self.main_view.init_signals()
        self.realm_view.init_signals()
        self.choose_realm.init_signals()

        louie.connect(self.show_key.set_text,              "show key")

        louie.connect(self.get_command,                    "enter_command")

        louie.connect(self.get_user_input,                 "enter_user_input")

    def show_all_input(self, input, raw):
        return input

    def manage_input(self, input):
        if self.get_state() == "main":
            self.main_view.position = self.frame.get_body().get_focus()[1]
        if not louie.send("%s_%s" % (input, self.get_state())):
            # tuple == mouse input
            self.show_key.set_text(input if not isinstance(input, tuple) else "%s, %s, %s, %s" % input)

    def get_command(self):
        self.frame.set_focus('body')
        self.show_key.set_text("User input: " + self.footer.get_focus().edit_text[1:])
        self.footer.get_focus().edit_text = ""
        louie.send("set state", None, "main")

    def get_user_input(self):
        self.frame.set_focus('body')
        # debug
        self.show_key.set_text("Mission description: " + self.footer.get_focus().edit_text)
        self.user_input = self.footer.get_focus().edit_text
        self.footer.get_focus().edit_text = ""
        self.footer.get_focus().set_caption("")
        louie.send("set state", None, "main")
        louie.send("user_input_done")

if __name__ == "__main__":
    Window().run()
