#!/usr/bin/python
# -*- coding:Utf-8 -*-

import urwid
import louie
import holygrail

from datetime import datetime, timedelta, date

class MissionWidget(urwid.Text):
    def __init__(self, mission):
        if not isinstance(mission, holygrail._Mission):
            raise ValueError("Mission widget need a holygrail._Mission object")
        self.mission = mission
        urwid.Text.__init__(self, self.display(), wrap="clip")

    def display(self):
        def format_timedelta(td):
            if -td.days > 1:
                return "%s days" % ((-td.days) - 1)
            else:
                minutes = td.seconds / 60
                if minutes > 60:
                    return "%s hours" % (minutes  / (60))
                else:
                    return "%s minutes" % (minutes)

        display = ["   "]
        old = date.today() - self.mission.created_at
        if (old.days - 1)/7 > 0:
            display.append(("old", "|"*((old.days - 1)/7)))
            display.append(" ")
        display.append("%s" % self.mission.description)
        if self.mission.quest:
            display.append(" ")
            display.append(("quest", "[%s]" % self.mission.quest.description))
        if self.mission.due:
            display.append(" - ")
            if self.mission.due > datetime.now():
                color = "date left"
                display.append((color, "%s" % format_timedelta(datetime.now() - self.mission.due)))
            else:
                color = "date late"
                display.append((color, "%s" % format_timedelta(self.mission.due - datetime.now() )))

        return display

    def activate(self):
        self.mission.toggle()

    def due_today(self, days):
        if days == 1:
            self.mission.due_for(datetime.today())
        else:
            self.mission.due_for(datetime.today() + timedelta(days))

    def get_realm(self):
        return self.mission.realm

    def get_quest(self):
        return self.mission.quest

class SeparationWidget(urwid.Text):
    def __init__(self, text):
        urwid.Text.__init__(self, ('realm', text.upper()), wrap="clip")

    def activate(self):
        pass

class RealmWidget(SeparationWidget):
    def __init__(self, realm, detailled=False):
        if not isinstance(realm, holygrail._Realm):
            raise ValueError("Realm widget need a holygrail._Realm object")
        text = [('realm', realm.description.upper())]
        if detailled:
            if realm.default_realm:
                text.append(( "quest", " [default]"))
            text.append(" (%i)" % len(realm.get_missions()))
        if realm.hide:
            text.append(" - ")
            text.append(("date left", "HIDE"))
        urwid.Text.__init__(self, text, wrap="clip")
        self.realm = realm

    def activate(self):
        self.realm.toggle_hide()

class State(object):
    def __init__(self, states_set, state):
        self.avalaible_states = states_set
        self.state = None
        self.set_state(state)
        louie.connect(self.set_state, "set state")
        louie.connect(self.get,       "get state")

    def set_state(self, state):
        if state not in self.avalaible_states:
            raise ValueError("Unknow state: %s, should be one of those %s" % (state, self.avalaible_states))
        self.state = state

    def get(self):
        return self.state

class MainViewList(object):
    def __init__(self, frame):
        self.position = 0
        self.frame = frame

    def init_signals(self):
        louie.connect(self.update_main_view,               "update_main")
        louie.connect(self.update_main_view,               "1_realm")

        louie.connect(self.go_up,                          "k_main")
        louie.connect(self.go_down,                        "j_main")
        louie.connect(self.exit,                           "q_main")
        louie.connect(self.command_line,                   ":_main")
        louie.connect(self.tickle_one_day,                 "+_main")
        louie.connect(self.tickle_3_hours,                 "=_main")
        louie.connect(self.due_today,                      "t_main")
        louie.connect(self.due_in_3_days,                  "T_main")
        louie.connect(self.due_this_week,                  "w_main")
        louie.connect(self.no_due,                         "W_main")
        louie.connect(self.toggle_n_recreate,              "R_main")
        louie.connect(self.toggle_mission,                 " _main")
        louie.connect(self.remove_mission,                 "d_main")

        louie.connect(self.get_user_input_main_view,       "enter_user_input")

    def update_main_view(self):
        self.content = self.fill_main_view()
        self.listbox = urwid.ListBox(self.content)
        self.frame.set_body(self.listbox)
        self.content.set_focus(self.position)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, urwid.Divider):
            self.position -= 1
            self.content.set_focus(self.position)
        elif isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.position += 1
            self.content.set_focus(self.position)
        louie.send("set state", None, "main")

    def fill_main_view(self):
        super_main_view = holygrail.Grail().super_main_view()
        last_completed_missions = holygrail.Grail().last_completed_missions()
        if not super_main_view and not last_completed_missions:
            return urwid.SimpleListWalker([urwid.Text("You don't have any mission, press 'n' to create a new one")])
        main_view = []
        for i in super_main_view:
            # bouuuh ! ugly code !
            try:
                main_view.append(RealmWidget(i[0]))
            except:
                main_view.append(SeparationWidget(i[0]))
            for j in i[1]:
                main_view.append(MissionWidget(j))

            main_view.append(urwid.Divider(" "))

        if len(last_completed_missions) != 0:
            a = 0
            main_view.append(SeparationWidget("LAST COMPLETED MISSIONS"))
            for i in holygrail.Grail().last_completed_missions():
                if a > 5:
                    break
                a += 1
                main_view.append(MissionWidget(i))

        to_return = urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in main_view])

        to_return.set_focus(1)
        return to_return

    def get_main_view(self):
        self.update_main_view()
        return self.content

    def go_down(self):
        self.frame.get_body().set_focus(self.position + 1)
        louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, urwid.Divider):
            self.frame.get_body().set_focus(self.position + 3)
            louie.send("show key", None, "Gotcha !")

    def go_up(self):
        if self.position > 1:
            self.frame.get_body().set_focus(self.position - 1)
            louie.send("show key", None, "Current: %s" % self.frame.get_body().get_focus()[0].original_widget)
            if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
                self.frame.get_body().set_focus(self.position - 3)
                louie.send("show key", None, "Gotcha !")

    def command_line(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().insert_text(":")
        louie.send("set state", None, "command")

    def tickle_one_day(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.tickle(datetime.now() + timedelta(days=1))
            louie.send("update_main")

    def tickle_3_hours(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.tickle(datetime.now() + timedelta(hours=3))
        louie.send("update_main")

    def due_today(self, days=1):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.due_today(days)
        louie.send("update_main")

    def due_in_3_days(self):
        self.due_today(4)

    def due_this_week(self):
        self.due_today(8)

    def no_due(self):
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, MissionWidget):
            self.frame.get_body().get_focus()[0].original_widget.mission.due_for(None)
        louie.send("update_main")

    def toggle_n_recreate(self):
        mission = self.frame.get_body().get_focus()[0].original_widget
        mission.activate()
        holygrail.Grail().add_mission(mission.mission.description, quest=mission.get_quest(), realm=mission.get_realm())
        louie.send("update_main")

    def remove_mission(self):
        self.frame.get_body().get_focus()[0].original_widget.mission.remove()
        self.frame.get_body().set_focus(self.position - 1)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.frame.get_body().set_focus(self.position)
        else:
            self.position -= 1
        louie.send("update_main")

    def toggle_mission(self):
        mission = self.frame.get_body().get_focus()[0].original_widget.mission

        if not mission.completed and mission.quest:
            self.add_new_mission_to_quest()
        else:
            mission.toggle()
            louie.send("update_main")

    def add_new_mission_to_quest(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Next mission description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_next_mission_to_quest, "user_input_done")

    def get_next_mission_to_quest(self):
        # I got what I want, disconnect
        louie.disconnect(self.get_next_mission_to_quest, "user_input_done")
        old_mission = self.frame.get_body().get_focus()[0].original_widget.mission
        if self.user_input.strip():
            new_mission = holygrail.Grail().add_mission(self.user_input, realm=old_mission.realm.id, quest=old_mission.quest.id)
        old_mission.toggle()
        louie.send("update_main")

    def get_user_input_main_view(self):
        self.frame.set_focus('body')
        # debug
        louie.send("show key", None, "Mission description: " + self.frame.footer.get_focus().edit_text)
        self.user_input = self.frame.footer.get_focus().edit_text
        self.frame.footer.get_focus().edit_text = ""
        self.frame.footer.get_focus().set_caption("")
        louie.send("set state", None, "main")
        louie.send("user_input_done")

    def exit(self):
        raise urwid.ExitMainLoop()

class Window(object):

    def __init__(self):
        self.state = State(set(("main", "command", "realm", "user_input", "chose_realm")), "main")
        self.frame = urwid.Frame(urwid.Text(""))
        self.main_view = MainViewList(self.frame)
        self.listbox = urwid.ListBox(self.main_view.get_main_view())
        self.show_key = urwid.Text("HolyGrail 0.1", wrap='clip')
        self.top = urwid.AttrMap(self.show_key, 'header')
        self.footer = urwid.Pile([urwid.AttrMap(urwid.Text(('header', "I am before command line")), "header"), urwid.Edit("", "")])
        self.frame.set_body(self.listbox)
        self.frame.set_header(self.top)
        self.frame.set_footer(self.footer)

        palette = [('header', 'white', 'dark red'),
                   ('reveal focus', 'white', 'dark red', 'standout'),
                   ('realm', 'dark red', '', 'bold'),
                   ('quest', 'light green', '', 'bold'),
                   ('old', 'yellow', '', 'bold'),
                   ('date left', 'black', 'light cyan'),
                   ('date late', 'yellow', 'dark magenta'),
                   ('mission', 'light gray', '')]

        self.loop = urwid.MainLoop(self.frame, palette, input_filter=self.show_all_input, unhandled_input=self.manage_input)
        self.init_signals()
        self.position_chose_realm = 0

    def get_state(self):
        return louie.send("get state")[0][1]

    def exit(self):
        raise urwid.ExitMainLoop()

    def run(self):
        self.loop.run()

    def init_signals(self):
        self.main_view.init_signals()

        louie.connect(self.show_key.set_text,              "show key")

        louie.connect(self.update_realm_view,              "update_realm")

        louie.connect(self.get_command,                    "enter_command")

        louie.connect(self.add_mission_to_current_realm,   "a_main")
        louie.connect(self.add_mission_to_default_realm,   "n_main")
        louie.connect(self.add_completed_mission,          "c_main")
        louie.connect(self.add_quest_to_current_mission,   "p_main")
        louie.connect(self.swap_mission_to_quest,          "s_main")
        louie.connect(self.rename_mission,                 "r_main")
        louie.connect(self.update_realm_view,              "2_main")

        louie.connect(self.move_up_realm,                  "K_realm")
        louie.connect(self.move_down_realm,                "J_realm")
        louie.connect(self.go_up_chose_realm,              "k_realm")
        louie.connect(self.go_down_chose_realm,            "j_realm")
        louie.connect(self.toggle_realm_hide,              " _realm")
        louie.connect(self.add_new_realm,                  "a_realm")
        louie.connect(self.add_new_realm,                  "n_realm")
        louie.connect(self.rename_realm,                   "r_realm")
        louie.connect(self.remove_realm,                   "d_realm")
        louie.connect(self.exit,                           "q_realm")

        louie.connect(self.get_user_input,                 "enter_user_input")

        louie.connect(self.chose_realm,                    "C_main")
        louie.connect(self.go_up_chose_realm,              "k_chose_realm")
        louie.connect(self.go_down_chose_realm,            "j_chose_realm")
        louie.connect(self.return_to_main_view,            "q_chose_realm")
        louie.connect(self.select_realm,                   "enter_chose_realm")

    def select_realm(self):
        if isinstance(self.listbox.get_focus()[0].original_widget, MissionWidget):
            self.listbox.get_focus()[0].original_widget.mission.change_realm(self.frame.get_body().get_focus()[0].original_widget.realm.id)
        louie.send("update_main")

    def chose_realm(self):
        realm_list = [RealmWidget(c) for c in holygrail.Grail().list_realms(all_realms=True)]
        realm_list = urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in realm_list])
        listbox = urwid.ListBox(realm_list)
        listbox.set_focus(self.position_chose_realm)
        self.frame.set_body(listbox)
        louie.send("set state", None, "chose_realm")

    def return_to_main_view(self):
        self.frame.set_body(self.listbox)
        louie.send("set state", None, "main")

    def update_realm_view(self):
        self.content = self.fill_realm_view()
        self.listbox = urwid.ListBox(self.content)
        self.frame.set_body(self.listbox)
        self.content.set_focus(self.position_chose_realm)
        louie.send("set state", None, "realm")

    def fill_realm_view(self):
        context_view = [RealmWidget(i, detailled=True) for i in holygrail.Grail().list_realms(all_realms=True)]
        if context_view:
            return urwid.SimpleListWalker([urwid.AttrMap(w, None, 'reveal focus') for w in context_view])
        else:
            return urwid.SimpleListWalker([urwid.Text("Error, you don't have any realm, something really wrong has happended")])

    def show_all_input(self, input, raw):
        return input

    def manage_input(self, input):
        if self.get_state() == "main":
            self.main_view.position = self.frame.get_body().get_focus()[1]
        if not louie.send("%s_%s" % (input, self.get_state())):
            # tuple == mouse input
            self.show_key.set_text(input if not isinstance(input, tuple) else "%s, %s, %s, %s" % input)

    def get_command(self):
        self.frame.set_focus('body')
        self.show_key.set_text("User input: " + self.footer.get_focus().edit_text[1:])
        self.footer.get_focus().edit_text = ""
        louie.send("set state", None, "main")

    def toggle_realm_hide(self):
        self.frame.get_body().get_focus()[0].original_widget.activate()
        louie.send("update_realm")

    def remove_realm(self):
        realm = self.frame.get_body().get_focus()[0].original_widget.realm
        if realm.default_realm:
            # TODO display error
            return
        all_missions = realm.get_missions(all_missions=True)

        # I can't delete a realm with mission, so move all the missions to the default realm
        if all_missions:
            for i in all_missions:
                i.change_realm(holygrail.Grail().get_default_realm().id)
        realm.remove()

        self.frame.get_body().set_focus(self.main_view.position - 1)
        if isinstance(self.frame.get_body().get_focus()[0].original_widget, SeparationWidget):
            self.frame.get_body().set_focus(self.main_view.position)
        else:
            self.main_view.position -= 1
        louie.send("update_realm")

    def get_user_input(self):
        self.frame.set_focus('body')
        # debug
        self.show_key.set_text("Mission description: " + self.footer.get_focus().edit_text)
        self.user_input = self.footer.get_focus().edit_text
        self.footer.get_focus().edit_text = ""
        self.footer.get_focus().set_caption("")
        louie.send("set state", None, "main")
        louie.send("user_input_done")

    def swap_mission_to_quest(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_swap_mission_to_quest, "user_input_done")

    def get_swap_mission_to_quest(self):
        # I got what I want, disconnect
        louie.disconnect(self.get_swap_mission_to_quest, "user_input_done")
        if self.user_input.strip():
            old_mission = self.frame.get_body().get_focus()[0].original_widget.mission
            is_quest = holygrail.Grail().get_quest_by_desc(old_mission.description)
            if not is_quest:
                new_quest = holygrail.Grail().add_quest(old_mission.description)
                old_mission.change_quest(new_quest.id)
            else:
                old_mission.change_quest(is_quest[0].id)
            old_mission.rename(self.user_input)
            louie.send("update_main")

    def rename_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("New mission description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_rename_mission, "user_input_done")

    def rename_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("New realm description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_rename_realm, "user_input_done")

    def get_rename_realm(self):
        louie.disconnect(self.get_rename_realm, "user_input_done")
        if self.user_input.strip():
            self.frame.get_body().get_focus()[0].original_widget.realm.rename(self.user_input.strip())
            louie.send("update_realm")

    def add_new_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Realm description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_new_realm, "user_input_done")

    def add_mission_to_current_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_current_realm_mission, "user_input_done")

    def add_quest_to_current_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Quest description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_quest_to_current_mission, "user_input_done")

    def get_new_realm(self):
        louie.disconnect(self.get_new_realm, "user_input_done")
        if self.user_input.strip():
            self.main_view.position += 1
            holygrail.Grail().add_realm(self.user_input)
            louie.send("update_realm")

    def get_rename_mission(self):
        louie.disconnect(self.get_rename_mission, "user_input_done")
        if self.user_input.strip():
            self.frame.get_body().get_focus()[0].original_widget.mission.rename(self.user_input.strip())
            louie.send("update_main")

    def get_quest_to_current_mission(self):
        # I got what I want, disconnect
        louie.disconnect(self.get_quest_to_current_mission, "user_input_done")
        if self.user_input.strip():
            is_quest = holygrail.Grail().get_quest_by_desc(self.user_input.strip())
            if not is_quest:
                new_quest = holygrail.Grail().add_quest(self.user_input)
                self.frame.get_body().get_focus()[0].original_widget.mission.change_quest(new_quest.id)
            else:
                self.frame.get_body().get_focus()[0].original_widget.mission.change_quest(is_quest[0].id)
            louie.send("update_main")

    def add_mission_to_default_realm(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input")
        louie.connect(self.get_default_realm_mission, "user_input_done")

    def add_completed_mission(self):
        self.frame.set_focus('footer')
        self.frame.get_footer().get_focus().set_caption("Mission description: ")
        louie.send("set state", None, "user_input")
        # this is the receiver
        louie.connect(self.get_completed_mission, "user_input_done")

    def get_completed_mission(self):
        # I got what I want, disconnect
        louie.disconnect(self.get_completed_mission, "user_input_done")
        if self.user_input.strip():
            new_mission = holygrail.Grail().add_mission(self.user_input)
            new_mission.toggle()

    def get_default_realm_mission(self):
        louie.disconnect(self.get_current_realm_mission, "user_input_done")
        if self.user_input.strip():
            self.main_view.position += 1
            holygrail.Grail().add_mission(self.user_input)
            louie.send("update_main")

    def get_current_realm_mission(self):
        louie.disconnect(self.get_current_realm_mission, "user_input_done")
        if self.user_input.strip():
            self.main_view.position += 1
            new_mission_realm = self.frame.get_body().get_focus()[0].original_widget.get_realm()

            current_todo_due_date = self.frame.get_body().get_focus()[0].original_widget.mission.due
            due_date = None
            if current_todo_due_date:
                if current_todo_due_date < datetime.now() + timedelta(1):
                    due_date = datetime.now() + timedelta(1)
                elif current_todo_due_date < datetime.now() + timedelta(4):
                    due_date = datetime.now() + timedelta(4)
                elif current_todo_due_date < datetime.now() + timedelta(8):
                    due_date = datetime.now() + timedelta(8)

            holygrail.Grail().add_mission(self.user_input, realm=new_mission_realm, due=due_date)
            louie.send("update_main")

    def move_down_realm(self):
        if self.position_chose_realm < len(holygrail.Grail().list_realms(all_realms=True)):
            realm = self.frame.get_body().get_focus()[0].original_widget.realm
            a = realm.position
            realm.change_position(realm.position + 1)
            self.position_chose_realm += 1
            louie.send("update_realm")

    def move_up_realm(self):
        if self.position_chose_realm > 0:
            realm = self.frame.get_body().get_focus()[0].original_widget.realm
            realm.change_position(realm.position - 1)
            self.position_chose_realm -= 1
            louie.send("update_realm")

    def go_down_chose_realm(self):
        # really unoptimised if
        if self.position_chose_realm < len(holygrail.Grail().list_realms(all_realms=True)):
            self.frame.get_body().set_focus(self.position_chose_realm + 1)
            self.position_chose_realm += 1
            self.show_key.set_text("Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

    def go_up_chose_realm(self):
        if self.position_chose_realm > 0:
            self.frame.get_body().set_focus(self.position_chose_realm - 1)
            self.position_chose_realm -= 1
            self.show_key.set_text("Current: %s" % self.frame.get_body().get_focus()[0].original_widget)

if __name__ == "__main__":
    Window().run()
